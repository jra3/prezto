## -*- coding: utf-8;mode: sh; -*- ##

local master_file="/usr/facebook/ops/rc/master.zshrc"
if [ -f "$master_file" ]; then
  source "$master_file"
fi

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

EMACS_DIR=~/.dot-emacs
EMACS_SOCKET_NAME="sockettome.$HOST"
EMACS_SOCKET_FILE="/tmp/$EMACS_SOCKET_NAME"

EDITOR="emacsclient --socket-name=$EMACS_SOCKET_FILE --tty"
HGMERGE="emacsclient --socket-name=$EMACS_SOCKET_FILE --tty"

ensure_daemon() {
    if [[ ! -a $EMACS_SOCKET_FILE ]]; then
        /bin/emacs --daemon=$EMACS_SOCKET_NAME
    fi
}

# Number of current visible frames,
# Emacs daemon always has a visible frame called F1
visible_frames() {
  emacsclient --socket-name=$EMACS_SOCKET_FILE -a "" -e '(length (visible-frame-list))'
}

## Focus on the first non-daemon frame
# without this, I'd open buffers in a non-visible frame and then not have the visited in my open one
change_focus() {
  emacsclient --socket-name=$EMACS_SOCKET_FILE -n -e "(select-frame-set-input-focus (car (or (nthcdr 1 (visible-frame-list))))))" # > /dev/null
}

_emacsfun() {
    ensure_daemon

    frames="$(visible_frames)"

    if [ $frames -lt  "2" ]; then # need to create a frame
        # works differently in X11 envs...
        if [ $DISPLAY ]; then
            # create a frame, but don't wait for it. It'll be X11
            emacsclient --socket-name=$EMACS_SOCKET_FILE --no-wait --create-frame "$@"
        else
            # create an emacs frame interactively
            emacsclient --socket-name=$EMACS_SOCKET_FILE --create-frame "$@"
        fi
    else # there is already a visible frame besides the daemon, so
        change_focus
        # supress error if no args passed
        test "$#" -ne "0" && emacsclient --socket-name=$EMACS_SOCKET_FILE -n "$@"
    fi
}


export WWW=/data/users/jallen/www-hg

alias cp='cp --backup=numbered'
alias ln='ln --backup=numbered'
alias mv='mv -f --backup=numbered'

alias g=git
alias www="cd $WWW"
alias fb="cd $FBCODE_DIR"
alias cf="cd ~/configerator"
alias e=_emacsfun
alias emacs=_emacsfun
# ripgrep > silver searcher, but my fingers disagree
alias ag=rg

bgs() { /usr/local/bin/bgs --forcedir=$( hg root ) $@ }
bgr() { /usr/local/bin/bgr --forcedir=$( hg root ) $@ }
bgf() { /usr/local/bin/bgf --forcedir=$( hg root ) $@ }

hhs() {
    hh_client --search $1 $WWW
}

# Open a Hack class in emacs
ec() {
    class=$1
    if [[ $1 =~ '^xhp_.*' ]]; then
        class=$( echo $1 | sed 's#^xhp_#:#' | sed 's#__#:#g' | sed 's#_#-#g' )
    fi
    cd $WWW && _emacsfun $( hh_client --search-class $class $WWW | cut -d\" -f2 | head -n 1 )
}


export PATH=~/bin:~/.cask/bin:$PATH:~/local/bin:$GOPATH/bin:$GOROOT/bin

export EMACS_DIR=~/.dot-emacs
export INPUTRC=~/.inputrc

EDITOR="emacsclient --socket-name=$EMACS_SOCKET_FILE --tty"
HGMERGE="emacsclient --socket-name=$EMACS_SOCKET_FILE --tty"

PROF() {(
  tmp=/tmp/PROF.tmp
  perf=/tmp/PROF.perf
  buck_args=()
  while [ "$1" != "--" -a "$1" != "" ]; do
    buck_args+=("$1")
    shift
  done
  bin_args="$@"
  unbuffer buck build --show-output "${buck_args[@]}" | tee $tmp
  [ "${PIPESTATUS[0]}" == "0" ] || return 1
  bin=`pwd`/`cat $tmp | perl -e 'local $/; $_=<STDIN>; chomp; s/^.* //s; print'`
  echo "Running: $bin $bin_args"
  sudo perf record -g -o $perf --call-graph dwarf $bin $bin_args
  sudo chmod a+r $perf
  stackstoscuba --perf $perf --dead
)}

# Make the shell's builtin pwd default to -P
set -o physical

# Use bourne-shell-compatible word splitting.
setopt SH_WORD_SPLIT

# I don't particularly like the extended glob stuff...
unsetopt EXTENDED_GLOB

# Compatibility with bash's PROMPT_COMMAND
precmd() { eval "$PROMPT_COMMAND" }
